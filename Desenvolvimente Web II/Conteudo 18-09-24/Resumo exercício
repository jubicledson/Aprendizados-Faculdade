Table of Contents:

1. Orientação a objetos:
1.1. Definindo classe
1.2. Visibilidade
1.3. Construtor
1.4. Exibindo dados
2. Armazenando objetos em $_SESSION
2.1. Exercício
2.2. Bootstrap
2.3. Envio dos exercícios
1. Orientação a objetos:
PHP suporta orientação à objetos.

1.1. Definindo classe
class Usuario {
    public $nome;
    public $idade;
    public $dataNascimento;
    public $matricula;

    public function __construct($nome, $idade, $dataNascimento, $matricula) {
	$this->nome = $nome;
	$this->idade = $idade;
	$this->dataNascimento = $dataNascimento;
	$this->matricula = $matricula;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////

1.2. Visibilidade
Em PHP podemos ter propriedades e métodos: public, protected ou private.

public
podem ser acessados de qualquer lugar.
protected
podem ser acessados na própria classe ou de classes referenciadas por herança acima.
private
só podem ser acessados por classes que definem esse membro.

////////////////////////////////////////////////////////////////////////////////////////////////////

1.3. Construtor
public function __construct($nome, $idade, $dataNascimento, $matricula) {
Chamando o construtor:

$usuario = new Usuario("Fulano de Tal", 30, "1970-01-01", "123456");
  
////////////////////////////////////////////////////////////////////////////////////////////////////

1.4. Exibindo dados
echo $usuario->nome;
  
////////////////////////////////////////////////////////////////////////////////////////////////////

2. Armazenando objetos em $_SESSION
Para armazenar um objeto em $_SESSION vamos transformar o objeto em uma forma que possa ser armazenada com serialize:

$usuarioDiferente = serialize($usuario);
Em seguida podemos guardar em $_SESSION:

session_start();

$_SESSION['usuario'] = $usuarioDiferente;
Para usar, em outra página precisamos retornar o objeto à sua forma original:

session_start();

$usuario = unserialize($_SESSION['usuario']);

echo $usuario->nome;
Atenção, serialize armazena apenas as propriedades do objeto, não os métodos, por isso para retornar o objeto à sua forma normal a página onde será o retorno precisa conter a definição da classe (para conhecer os métodos!).

////////////////////////////////////////////////////////////////////////////////////////////////////

2.1. Exercício
Crie no arquivo aluno.php a definição de uma classe aluno, é necessário ter nome, nascimento e mais DUAS propriedades à sua escolha.
Crie uma página (formulario.php) que recebe os dados de um aluno e envia para recebe.php.
Crie uma página (recebe.php) que com os dados recebidos cria um objeto aluno e o armazena em $_SESSION['aluno'].
Crie uma página (mostra.php) que mostre os dados guardados anteriormente em $_SESSION.
Adicione o método idade na classe aluno que calcula a idade do aluno e retorna o valor.
Crie a página (mostra_idade.php) que com o objeto guardado em $_SESSION, usando o método idade() mostra o nome e a idade do aluno: 'Fulano, 21 anos'.
Crie a página sair.php que encerra a $_SESSION e envia o usuário para formulario.php
  
////////////////////////////////////////////////////////////////////////////////////////////////////

2.2. Bootstrap
Vamos usar Bootstrap nas páginas dos exercícios anteriores.

Adicione os arquivos CSS e JavaScript necessários para usar Bootstrap nos exercícios anteriores (formulario.php, recebe.php, mostra.php, mostra_idade.php).
Coloque o conteúdo das páginas em container.
Ajuste as classes nos itens de formulário na página formulario.php, deixe cada campo em uma linha (row).
Mostre os itens do objeto criado em um modal na página recebe.php, um botão Mostrar deve ser apertado para mostrar.
Mostre os dados guardados em $_SESSION na página mostra.php usando um card.
Crie um menu em uma página php separada (menu.php) contendo as seguintes abas: Cadastrar, Mostrar, Idade e Sair. Envie para as páginas corretas e deixe destacada a aba correta. Adicione o menu em todas as páginas necessárias.
